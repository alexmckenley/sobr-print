{"version":3,"sources":["logo512.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","useLocalStorage","printHistory","setPrintHistory","React","useState","isPrinterOnline","setIsPrinterOnline","textareaNodeRef","useRef","pollStatus","useCallback","fetch","method","then","response","status","catch","useEffect","intervalID","setInterval","clearInterval","node","current","el","autosize","destroy","className","src","logo","alt","onSubmit","event","preventDefault","text","value","trim","length","job","id","replace","c","r","Math","random","toString","date","Date","now","body","Promise","reject","print","console","error","htmlFor","disabled","ref","type","onClick","map","key","href","e","loadJob","moment","fromNow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9ca16c7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo512.a7958246.png\";","import React from \"react\";\nimport logo from \"./logo512.png\";\nimport { useLocalStorage } from \"@rehooks/local-storage\";\nimport \"./App.css\";\nimport autosize from \"autosize\";\nimport moment from \"moment\";\n\ntype PrintJob = {\n  id: string;\n  text: string;\n  date: number;\n};\n\nconst PRINTER_URI = \"https://thermal.sobr.co/\";\n\nfunction uuidv4(): string {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction print(text: string): Promise<PrintJob> {\n  const job = {\n    id: uuidv4(),\n    text,\n    date: Date.now(),\n  };\n\n  const preparedText = \"\\n\" + text;\n  return fetch(PRINTER_URI, {\n    method: \"POST\",\n    body: preparedText,\n  }).then((response) => {\n    if (response.status === 200) {\n      return job;\n    } else {\n      return Promise.reject();\n    }\n  });\n}\n\nfunction App() {\n  const [printHistory, setPrintHistory] = useLocalStorage<PrintJob[]>(\n    \"PSCHistory\",\n    []\n  );\n  const [isPrinterOnline, setIsPrinterOnline] = React.useState(false);\n  const textareaNodeRef = React.useRef<HTMLTextAreaElement>(null);\n\n  const pollStatus = React.useCallback(() => {\n    fetch(PRINTER_URI, { method: \"GET\" })\n      .then((response) => {\n        if (response.status === 200) {\n          setIsPrinterOnline(true);\n        } else {\n          setIsPrinterOnline(false);\n        }\n      })\n      .catch(() => setIsPrinterOnline(false));\n  }, []);\n\n  React.useEffect(() => {\n    pollStatus();\n    const intervalID = setInterval(() => {\n      pollStatus();\n    }, 5000);\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, [pollStatus]);\n\n  React.useEffect(() => {\n    const node = textareaNodeRef.current;\n    if (node != null) {\n      const el = autosize(node);\n      return () => {\n        autosize.destroy(el);\n      };\n    }\n  }, [textareaNodeRef]);\n\n  function clearHistory(event: any) {\n    event.preventDefault();\n    setPrintHistory([]);\n  }\n\n  function loadJob(event: any, job: PrintJob) {\n    event.preventDefault();\n    const node = textareaNodeRef.current;\n    if (node != null) {\n      node.value = job.text;\n    }\n  }\n\n  function clearTextarea(event: any) {\n    event.preventDefault();\n    const node = textareaNodeRef.current;\n    if (node != null) {\n      node.value = \"\";\n    }\n  }\n\n  function onSubmit(event: any) {\n    event.preventDefault();\n    const node = textareaNodeRef.current;\n    const text = (node?.value ?? \"\").trim();\n    if (text.length > 0) {\n      print(text)\n        .then((job) => {\n          setPrintHistory([job, ...printHistory]);\n          if (node != null) {\n            node.value = \"\";\n          }\n        })\n        .catch(() => {\n          console.error(\"failed to print\");\n        });\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-heading\">print.sobr.co</h1>\n      <img\n        src={logo}\n        className={\"App-logo \" + (isPrinterOnline ? \"\" : \"App-logo-monochrome\")}\n        alt=\"logo\"\n      />\n\n      <div className=\"App-status\">\n        {isPrinterOnline ? \"(ready to print)\" : \"(printer offline)\"}\n      </div>\n\n      <form className=\"App-form\" onSubmit={onSubmit}>\n        <label className=\"App-hidden\" htmlFor=\"text\">\n          Text to print:\n        </label>\n        <textarea\n          disabled={!isPrinterOnline}\n          className=\"App-text\"\n          id=\"text\"\n          ref={textareaNodeRef}\n        ></textarea>\n        <div>\n          <input\n            disabled={!isPrinterOnline}\n            type=\"submit\"\n            className={\n              \"App-form-button button \" +\n              (isPrinterOnline ? \"button-primary\" : \"disabled\")\n            }\n            value=\"Print\"\n          />\n          <input\n            disabled={!isPrinterOnline}\n            type=\"button\"\n            className={\n              \"App-form-buttom button\" + (isPrinterOnline ? \"\" : \"disabled\")\n            }\n            onClick={clearTextarea}\n            value=\"Clear\"\n          />\n        </div>\n      </form>\n      <ul className=\"App-history\">\n        {printHistory.map((job) => {\n          return (\n            <li className=\"App-li\" key={job.id}>\n              {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n              <a href=\"#\" onClick={(e) => loadJob(e, job)} className=\"App-job\">\n                <span className=\"App-job-text\">{job.text}</span>\n                <span className=\"App-job-date\">\n                  {moment(job.date).fromNow()}\n                </span>\n              </a>\n            </li>\n          );\n        })}\n      </ul>\n      {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n      <a className=\"App-clearHistory button\" href=\"#\" onClick={clearHistory}>\n        Clear History\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}